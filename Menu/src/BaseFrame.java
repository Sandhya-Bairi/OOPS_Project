import java.awt.CardLayout;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.HashMap;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author chinkyminky
 */
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class BaseFrame extends javax.swing.JFrame {

    /**
     * Creates new form BaseFrame
     */
    public BaseFrame() {
        initComponents();
        finalOrderTable.setOpaque(false);

    }
    private static final int table_number = 1;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        try{
            java.awt.image.BufferedImage img = javax.imageio.ImageIO.read(new java.io.File("/home/chinkyminky/Desktop/2.jpg"));
            this.setContentPane(new javax.swing.JLabel(new javax.swing.ImageIcon(img)));
        } catch (java.io.IOException ex) {
            Logger.getLogger(BaseFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Something's wrong!");
        }
        categoryPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        SaladPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        saladTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        breadPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        breadTable = new javax.swing.JTable();
        quickPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        quickBitesTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        RicePanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        riceItemsTable = new javax.swing.JTable();
        dessertPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        dessertsTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        AppPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        appTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        mainCoursePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mainCourseTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        finalOrderTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        finalOrderButton = new javax.swing.JButton();
        userPanel = new javax.swing.JPanel();
        updateOrderButton = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        itemInfoTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1350, 569));

        categoryPanel.setOpaque(false);
        categoryPanel.setLayout(new java.awt.GridLayout(0, 1, 5, 5));

        jButton1.setText("SALADS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton1);

        jButton2.setText("APPETIZERS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton2);

        jButton3.setText("MAIN COURSE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton3);

        jButton4.setText("INDIAN BREADS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton4);

        jButton6.setText("RICE ITEMS");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton6);

        jButton5.setText("QUICK BITES");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton5);

        jButton7.setText("DESSERTS");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        categoryPanel.add(jButton7);

        menuPanel.setOpaque(false);
        menuPanel.setPreferredSize(new java.awt.Dimension(640, 399));
        menuPanel.setLayout(new java.awt.CardLayout());

        SaladPanel.setOpaque(false);

        saladTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Garden Green Salad",  new Integer(120),  new Integer(0),  new Boolean(false)},
                {"Fruit Cabiana",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Hawaiian Salad",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Curried Baby  Potato Salad",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Greek Salad",  new Integer(195),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        saladTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saladTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(saladTable);
        if (saladTable.getColumnModel().getColumnCount() > 0) {
            saladTable.getColumnModel().getColumn(0).setResizable(false);
            saladTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            saladTable.getColumnModel().getColumn(1).setResizable(false);
            saladTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            saladTable.getColumnModel().getColumn(2).setResizable(false);
            saladTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            saladTable.getColumnModel().getColumn(3).setResizable(false);
            saladTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        jLabel1.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel1.setText("SALADS");

        javax.swing.GroupLayout SaladPanelLayout = new javax.swing.GroupLayout(SaladPanel);
        SaladPanel.setLayout(SaladPanelLayout);
        SaladPanelLayout.setHorizontalGroup(
            SaladPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaladPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(SaladPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        SaladPanelLayout.setVerticalGroup(
            SaladPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaladPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuPanel.add(SaladPanel, "saladCard");

        breadPanel.setOpaque(false);
        breadPanel.setPreferredSize(new java.awt.Dimension(600, 320));

        jLabel4.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel4.setText("INDIAN BREADS");

        breadTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Butter Naan",  new Integer(35),  new Integer(0),  new Boolean(false)},
                {"Tandoori Roti",  new Integer(25),  new Integer(0),  new Boolean(false)},
                {"Stuffed Kulcha",  new Integer(50),  new Integer(0),  new Boolean(false)},
                {"Laccha Paratha",  new Integer(40),  new Integer(0),  new Boolean(false)},
                {"Chapathi",  new Integer(20),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        breadTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                breadTableMouseMoved(evt);
            }
        });
        breadTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                breadTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(breadTable);
        if (breadTable.getColumnModel().getColumnCount() > 0) {
            breadTable.getColumnModel().getColumn(0).setResizable(false);
            breadTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            breadTable.getColumnModel().getColumn(1).setResizable(false);
            breadTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            breadTable.getColumnModel().getColumn(2).setResizable(false);
            breadTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            breadTable.getColumnModel().getColumn(3).setResizable(false);
            breadTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        javax.swing.GroupLayout breadPanelLayout = new javax.swing.GroupLayout(breadPanel);
        breadPanel.setLayout(breadPanelLayout);
        breadPanelLayout.setHorizontalGroup(
            breadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(breadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(breadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        breadPanelLayout.setVerticalGroup(
            breadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(breadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuPanel.add(breadPanel, "breadCard");

        quickPanel.setOpaque(false);

        //jTable6.setRowSelectionEnabled(true);
        quickBitesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Samosa",  new Integer(35),  new Integer(0),  new Boolean(false)},
                {"French Fries",  new Integer(80),  new Integer(0),  new Boolean(false)},
                {"Pizza",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Cheese Burger",  new Integer(90),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        quickBitesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quickBitesTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(quickBitesTable);
        if (quickBitesTable.getColumnModel().getColumnCount() > 0) {
            quickBitesTable.getColumnModel().getColumn(0).setResizable(false);
            quickBitesTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            quickBitesTable.getColumnModel().getColumn(1).setResizable(false);
            quickBitesTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            quickBitesTable.getColumnModel().getColumn(2).setResizable(false);
            quickBitesTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            quickBitesTable.getColumnModel().getColumn(3).setResizable(false);
            quickBitesTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        jLabel5.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel5.setText("QUICK BITES");

        javax.swing.GroupLayout quickPanelLayout = new javax.swing.GroupLayout(quickPanel);
        quickPanel.setLayout(quickPanelLayout);
        quickPanelLayout.setHorizontalGroup(
            quickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(quickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        quickPanelLayout.setVerticalGroup(
            quickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuPanel.add(quickPanel, "quickCard");

        RicePanel.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel6.setText("RICE ITEMS");

        riceItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Vegetable Biryani",  new Integer(120),  new Integer(0),  new Boolean(false)},
                {"Kolhapuri Pulav",  new Integer(140),  new Integer(0),  new Boolean(false)},
                {"Paneer Kadai Pulav",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Veg Fried Rice",  new Integer(110),  new Integer(0),  new Boolean(false)},
                {"Sezwaan Fried Rice",  new Integer(130),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        riceItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                riceItemsTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(riceItemsTable);
        if (riceItemsTable.getColumnModel().getColumnCount() > 0) {
            riceItemsTable.getColumnModel().getColumn(0).setResizable(false);
            riceItemsTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            riceItemsTable.getColumnModel().getColumn(1).setResizable(false);
            riceItemsTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            riceItemsTable.getColumnModel().getColumn(2).setResizable(false);
            riceItemsTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            riceItemsTable.getColumnModel().getColumn(3).setResizable(false);
            riceItemsTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        javax.swing.GroupLayout RicePanelLayout = new javax.swing.GroupLayout(RicePanel);
        RicePanel.setLayout(RicePanelLayout);
        RicePanelLayout.setHorizontalGroup(
            RicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RicePanelLayout.setVerticalGroup(
            RicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuPanel.add(RicePanel, "riceCard");

        dessertPanel.setOpaque(false);

        dessertsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Choice of Ice Creams",  new Integer(90),  new Integer(0),  new Boolean(false)},
                {"Assorted Fruit Platter",  new Integer(90),  new Integer(0),  new Boolean(false)},
                {"Strawberry Cheese Cake",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Tiramisu",  new Integer(100),  new Integer(0),  new Boolean(false)},
                {"Chocolate Overloaded",  new Integer(130),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        dessertsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dessertsTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(dessertsTable);
        if (dessertsTable.getColumnModel().getColumnCount() > 0) {
            dessertsTable.getColumnModel().getColumn(0).setResizable(false);
            dessertsTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            dessertsTable.getColumnModel().getColumn(1).setResizable(false);
            dessertsTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            dessertsTable.getColumnModel().getColumn(2).setResizable(false);
            dessertsTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            dessertsTable.getColumnModel().getColumn(3).setResizable(false);
            dessertsTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        jLabel7.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel7.setText("DESSERTS");

        javax.swing.GroupLayout dessertPanelLayout = new javax.swing.GroupLayout(dessertPanel);
        dessertPanel.setLayout(dessertPanelLayout);
        dessertPanelLayout.setHorizontalGroup(
            dessertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dessertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dessertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dessertPanelLayout.setVerticalGroup(
            dessertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dessertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuPanel.add(dessertPanel, "dessertsCard");

        AppPanel.setOpaque(false);

        appTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Aloo Dhanya Tikki",  new Integer(130),  new Integer(0),  new Boolean(false)},
                {"Mushroom Tartlets",  new Integer(130),  new Integer(0),  new Boolean(false)},
                {"Corn Fritters",  new Integer(130),  new Integer(0),  new Boolean(false)},
                {"Malai Tikka Kaba",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Stuffed Baked Potatoes",  new Integer(195),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        appTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(appTable);
        if (appTable.getColumnModel().getColumnCount() > 0) {
            appTable.getColumnModel().getColumn(0).setResizable(false);
            appTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            appTable.getColumnModel().getColumn(1).setResizable(false);
            appTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            appTable.getColumnModel().getColumn(2).setResizable(false);
            appTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            appTable.getColumnModel().getColumn(3).setResizable(false);
            appTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        jLabel2.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel2.setText("APPETIZERS");

        javax.swing.GroupLayout AppPanelLayout = new javax.swing.GroupLayout(AppPanel);
        AppPanel.setLayout(AppPanelLayout);
        AppPanelLayout.setHorizontalGroup(
            AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AppPanelLayout.setVerticalGroup(
            AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AppPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuPanel.add(AppPanel, "appCard");

        mainCoursePanel.setOpaque(false);

        mainCourseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Diwani Hundi",  new Integer(125),  new Integer(0),  new Boolean(false)},
                {"Methi Baigan Masala",  new Integer(125),  new Integer(0),  new Boolean(false)},
                {"Shahi Paneer",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Kofta Noorjahani",  new Integer(150),  new Integer(0),  new Boolean(false)},
                {"Tofu Green Curry",  new Integer(195),  new Integer(0),  new Boolean(false)}
            },
            new String [] {
                "ITEM", "PRICE", "QUANTITY", "SELECT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mainCourseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainCourseTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(mainCourseTable);
        if (mainCourseTable.getColumnModel().getColumnCount() > 0) {
            mainCourseTable.getColumnModel().getColumn(0).setResizable(false);
            mainCourseTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            mainCourseTable.getColumnModel().getColumn(1).setResizable(false);
            mainCourseTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            mainCourseTable.getColumnModel().getColumn(2).setResizable(false);
            mainCourseTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            mainCourseTable.getColumnModel().getColumn(3).setResizable(false);
            mainCourseTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        jLabel3.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel3.setText("MAIN COURSE");

        javax.swing.GroupLayout mainCoursePanelLayout = new javax.swing.GroupLayout(mainCoursePanel);
        mainCoursePanel.setLayout(mainCoursePanelLayout);
        mainCoursePanelLayout.setHorizontalGroup(
            mainCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        mainCoursePanelLayout.setVerticalGroup(
            mainCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuPanel.add(mainCoursePanel, "mainCourseCard");

        jPanel1.setOpaque(false);

        finalOrderTable.setOpaque(false);
        //((DefaultTableCellRenderer)finalOrderTable.getDefaultRenderer(Object.class)).setOpaque(false);
        finalOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM", "CATEGORY", "QUANTITY", "TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        finalOrderTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(finalOrderTable);
        if (finalOrderTable.getColumnModel().getColumnCount() > 0) {
            finalOrderTable.getColumnModel().getColumn(0).setResizable(false);
            finalOrderTable.getColumnModel().getColumn(0).setPreferredWidth(160);
            finalOrderTable.getColumnModel().getColumn(1).setResizable(false);
            finalOrderTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            finalOrderTable.getColumnModel().getColumn(2).setResizable(false);
            finalOrderTable.getColumnModel().getColumn(2).setPreferredWidth(40);
            finalOrderTable.getColumnModel().getColumn(3).setResizable(false);
            finalOrderTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        jLabel8.setFont(new java.awt.Font("Ubuntu Condensed", 1, 36)); // NOI18N
        jLabel8.setText("YOUR ORDER");

        finalOrderButton.setText("PLACE FINAL ORDER");
        finalOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(finalOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(finalOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        userPanel.setOpaque(false);

        updateOrderButton.setText("UPDATE ORDER");
        updateOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(updateOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(updateOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        itemInfoTextArea.setColumns(20);
        itemInfoTextArea.setRows(5);
        itemInfoTextArea.setText("Order away! :)");
        jScrollPane9.setViewportView(itemInfoTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(categoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(68, 68, 68)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(userPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(categoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "saladCard");
        currentCard = "saladCard";
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "appCard");
        currentCard = "appCard";
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "mainCourseCard");
        currentCard = "mainCourseCard";
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "breadCard");
        currentCard = "breadCard";
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "quickCard");
        currentCard = "quickCard";
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "riceCard");
        currentCard = "riceCard";
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        CardLayout showPanel = (CardLayout) menuPanel.getLayout();
        showPanel.show(menuPanel, "dessertsCard");
        currentCard = "dessertsCard";
    }//GEN-LAST:event_jButton7ActionPerformed

    private void finalOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalOrderButtonActionPerformed

          DefaultTableModel dtm1 = (DefaultTableModel) finalOrderTable.getModel();
          try {
            Socket sock = new Socket("127.0.0.1", 9090);
            DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
            dos.writeInt(table_number); //Hmm. It seems to get stuck somewhere. What do you think?  Since it isn't printing the table number only, it must be here.
            //Right. Let's try using the writeObject method.
            //Do the needful?
            //as in? Run this again. :P We made the change right? thats all change? Let's see if the table number is being printed.okaaay
            //Send number of rows  Is the integer typecast necessary? No
            int rowCount = dtm1.getRowCount();
            dos.writeInt(rowCount);
            for(int i=0; i<rowCount; i++)
            {
                String item = (String)dtm1.getValueAt(i, 0);
                int quantity = (int) dtm1.getValueAt(i, 2);
                dos.writeUTF(item);
                dos.writeInt(quantity);
            }
            
            

        } catch (IOException ex) {//This iis called 'Try with resreources'. OUIBy doing this, you don't have to worry about
            //closing sockets or streams, it is automatically done. But here, you are writing OUTSIDE the parantheses, so oos
            //won't exist ( may be wrong) okay, so let's not use it? Also, you are writing an 'int' as an object. OBut it isn;t
            //Write an Integer. Wait

            Logger.getLogger(BaseFrame.class.getName()).log(Level.SEVERE, null, ex);
            
        }
          int total = 0;
          int rowCount = dtm1.getRowCount();
          for(int k=0;k<rowCount;k++)
          {
             total+= (Integer)dtm1.getValueAt(k,3);
              
          }
          
          JOptionPane.showMessageDialog(null,"Your order has been placed successfully! \n Your total bill is: Rs."+total );
          
          
          
          dtm1.setRowCount(0);
          DefaultTableModel SaladTable = (DefaultTableModel)saladTable.getModel();
          DefaultTableModel BreadTable = (DefaultTableModel)breadTable.getModel();
          DefaultTableModel QuickBitesTable = (DefaultTableModel)quickBitesTable.getModel();
          DefaultTableModel RiceItemsTable = (DefaultTableModel)riceItemsTable.getModel();
          DefaultTableModel DessertsTable = (DefaultTableModel)dessertsTable.getModel();
          DefaultTableModel AppTable = (DefaultTableModel)appTable.getModel();
          DefaultTableModel MainCourseTable = (DefaultTableModel)mainCourseTable.getModel();
          
          int number = SaladTable.getRowCount();
          for(int i =0; i<number; i++)
          {
              SaladTable.setValueAt(false, i, 3);
              SaladTable.setValueAt(0,i,2);
          }
          number=BreadTable.getRowCount();
          for(int i =0; i<number; i++)
          {
              BreadTable.setValueAt(false, i, 3);
              BreadTable.setValueAt(0,i,2);
          }
          number=QuickBitesTable.getRowCount();
          for(int i =0; i<number; i++)
          {
              QuickBitesTable.setValueAt(false, i, 3);
              QuickBitesTable.setValueAt(0,i,2);
          }
          number=RiceItemsTable.getRowCount();
          for(int i =0; i<number; i++)
          {
              RiceItemsTable.setValueAt(false, i, 3);
              RiceItemsTable.setValueAt(0,i,2);
          }
          number= DessertsTable.getRowCount();
          for(int i =0; i<number; i++)
          {
              DessertsTable.setValueAt(false, i, 3);
              DessertsTable.setValueAt(0,i,2);
          }
          number=AppTable.getRowCount();
          
          for(int i =0; i<number; i++)
          {
              AppTable.setValueAt(false, i, 3);
              AppTable.setValueAt(0,i,2);
          }
          number=MainCourseTable.getRowCount();
          for(int i =0; i<number; i++)
          {
              MainCourseTable.setValueAt(false, i, 3);
              MainCourseTable.setValueAt(0,i,2);
          }
          
          
        
    }//GEN-LAST:event_finalOrderButtonActionPerformed

    private void updateOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrderButtonActionPerformed

        String category = "";
        javax.swing.JTable table = null;
        switch (currentCard) {
            case "saladCard":
                table = saladTable;
                category = "SALAD";
                break;
            case "appCard":
                table = appTable;
                category = "APPETIZER";
                break;
            case "dessertsCard":
                table = dessertsTable;
                category = "DESSERTS";
                break;
            case "mainCourseCard":
                table = mainCourseTable;
                category = "MAIN COURSE";
                break;
            case "quickCard":
                table = quickBitesTable;
                category = "QUICK BITES";
                break;
            case "riceCard":
                table = riceItemsTable;
                category = "RICE ITEM";
                break;
            case "breadCard":
                table = breadTable;
                category = "BREAD";
                break;
        }

        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        DefaultTableModel dtm2 = (DefaultTableModel) finalOrderTable.getModel();

        int nRows = dtm.getRowCount();
        int rowCount = dtm2.getRowCount();

        int j = rowCount, k;
        for (k = rowCount - 1; k >= 0; k--) {
            String compare = (String) dtm2.getValueAt(k, 1);
            if (compare.equals(category)) {
                dtm2.removeRow(k);
                j--;
            }
        }

        for (int i = 0; i < nRows; i++) {
            if (((boolean) dtm.getValueAt(i, 3)) && !(((Integer) dtm.getValueAt(i, 2)).equals(0))) {
                String s = (String) dtm.getValueAt(i, 0);
                int quantity = (int) dtm.getValueAt(i, 2);
                int total = (int) dtm.getValueAt(i, 1) * quantity;
                dtm2.addRow(new Object[1]);
                dtm2.setValueAt(s, j, 0);
                dtm2.setValueAt(quantity, j, 2);
                dtm2.setValueAt(category, j, 1);
                dtm2.setValueAt(total, j, 3);
                j++;

            }
        }
    }//GEN-LAST:event_updateOrderButtonActionPerformed

    private void quickBitesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickBitesTableMouseClicked
        // TODO add your handling code here:

        int row;
        if ((row = quickBitesTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) quickBitesTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_quickBitesTableMouseClicked

    private void breadTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_breadTableMouseClicked
       int row;
        if ((row = breadTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) breadTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_breadTableMouseClicked

    private void breadTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_breadTableMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_breadTableMouseMoved

    private void saladTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saladTableMouseClicked
        int row;
        if ((row =saladTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) saladTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_saladTableMouseClicked

    private void riceItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_riceItemsTableMouseClicked
        int row;
        if ((row = riceItemsTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) riceItemsTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_riceItemsTableMouseClicked

    private void dessertsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dessertsTableMouseClicked
       int row;
        if ((row = dessertsTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) dessertsTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_dessertsTableMouseClicked

    private void appTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appTableMouseClicked
       int row;
        if ((row = appTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) appTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_appTableMouseClicked

    private void mainCourseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainCourseTableMouseClicked
       int row;
        if ((row = mainCourseTable.getSelectedRow()) >= 0) {
            String item = (String) ((DefaultTableModel) mainCourseTable.getModel()).getValueAt(row, 0);
            itemInfoTextArea.setText((String) itemInfo.get(item));
        } else {
            itemInfoTextArea.setText("Order away! :)");
        }
    }//GEN-LAST:event_mainCourseTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //Update the info table
        itemInfo = new HashMap<>();
        itemInfo.put("Garden Green Salad",
"Fresh garden vegetables dressed with herb vinaigrette");
        itemInfo.put("Fruit Cabiana",
"Mixed fruit and walnut tossed in balsamic vinaigrette dressing");
        itemInfo.put("Hawaiian Salad",
"A perfect combination of pineapple, bell pepper and mayonnaise");
        itemInfo.put("Curried Baby  Potato Salad",
"Warm salad with crispy fried bacon and baby potatoes in \n"
        + "curry mayonnaise and topped with runny egg");
        itemInfo.put("Greek Salad",
"Cucumber, tomatoes, red onion, cheese and olives seasoned \nwith black pepper,salt, oregano, basil,\n dressed with olive oil.");
        itemInfo.put("Aloo Dhanya Tikki",
"Deep fried potato, cheese and coriander pattice \nflavored with North Indian spices. ");
        itemInfo.put("Corn Fritters",
"Sweet corn kernels and spring onion fritters served with tomato sauce");
        itemInfo.put("Mushroom Tartlets",
"Delicious tartlets, perfect for a buffet or light appetiser,\nwith best mix of mushrooms to make it your own.");
        itemInfo.put("Malai Tikka Kaba",
"This punjabi dish has Indian Cottage Cheese cooked in soft \nand creamy marination with gentle spices. ");
        itemInfo.put("Stuffed Baked Potatoes",
"A baked potato stuffed with ham and parmesan cheese \nmakes an easy and tasty meal.");
        itemInfo.put("Diwani Hundi",
"Fresh mixed vegetables cooked with turmeric and coriander");
        itemInfo.put("Methi Baigan Masala",
"North Indian classic preparation of eggplant with fenugreek leaves");
        itemInfo.put("Shahi Paneer",
"Tasty paneer in a thick gravy made up of cream, tomatoes and spices.\n It is mainly eaten with roti, naan, rice, other breads.");
        itemInfo.put("Kofta Noorjahani",
"Creamy cheese and potato dumplings cooked in rich brown gravy");
        itemInfo.put("Tofu Green Curry",
"A rich and spicy Thai green curry with cubed tofu and vegetables");
        itemInfo.put("Butter Naan",
"Butter Naan, a butter flavored flat bread is one of \nthe most extremely delicious dish of Indian breads.\n" +
"usually made in tandoor, can also be made on stove top and oven.  ");
        itemInfo.put("Tandoori Roti",
"Tandoori Roti is traditionally cooked in a clay oven or tandoor. \n" +
"This recipe uses a regular home oven with pizza or \nbaking stone which provides a similar effect to the tandoor.");
        itemInfo.put("Stuffed Kulcha",
"Crisp and soft leavened flat breads stuffed with a spiced potato stuffing.");
        itemInfo.put("Laccha Paratha",
"Whole wheat layered flat bread\n" +
"A treat with any meal and can be served with any gravy base dish.");
        itemInfo.put("Chapathi",
"Thin pancake of unleavened wholemeal bread cooked on a griddle.");
        itemInfo.put("Vegetable Biryani",
"A mixed rice dish from the Indian subcontinent. \nIt is made with spices, rice and meat or vegetables.");
        itemInfo.put("Kolhapuri Pulav",
"A great one-dish meal and is great for a quick weekday dinner.\nusually served with some simple onion and tomato raita.");
        itemInfo.put("Paneer Kadai Pulav",
"a popular mumbai food of rice and vegetables sauted together \nwith pav bhaji masala and other spices-herbs.");
        itemInfo.put("Veg Fried Rice",
"Indo chinese vegetable fried rice recipe.\n one of the popular foods in india.");
        itemInfo.put("Sezwaan Fried Rice",
"Spicy stir fried indo chinese recipe of vegetables and \nrice in schezwan sauce.");
        itemInfo.put("Samosa",
"Savoury pastry fried in ghee or oil, containing spiced vegetables.");
        itemInfo.put("French Fries",
"Deep fried potato strips served with Tomato sauce");
        itemInfo.put("Pizza",
"A dish of Italian origin, consisting of a flat round base \nof dough baked with a topping of tomatoes and cheese,\n typically with added meat, fish, or vegetables.");
        itemInfo.put("Cheese Burger","Filled with four types of cheese and crunchu aloo patty");
        itemInfo.put("Choice of Ice Creams",
"You can pick any of your choices like Belgian Chocolate, Butterscotch,\n Mango, Strawberry, Black Current etc.");
        itemInfo.put("Assorted Fruit Platter",
"Variety of seasonal fruits in a platter");
        itemInfo.put("Strawberry Cheese Cake",
"The original Worlds Most Fabulous Cheesecake is\n topped with fresh strawberry pie filling and baked into \na graham crust. Finished with our macaroon crunch. ");
        itemInfo.put("Tiramisu",
"Italian dessert consisting of layers of sponge \ncake soaked in coffee and brandy or liqueur \nwith powdered chocolate and mascarpone cheese.");
        itemInfo.put("Chocolate Overloaded",
"Truly a chocolate lover's dream come true moist,\n rich chocolate cake,chocolate chips,  and \nfudgy chocolate icing dusted with chocolate shavings. \n"
        + "It's an overload of chocolate!");
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BaseFrame bf = new BaseFrame();
                bf.setTitle("Menu Table");
                bf.setVisible(true);
            }
        });
    }

    private String currentCard = "saladCard";
    private static HashMap<String, String> itemInfo = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AppPanel;
    private javax.swing.JPanel RicePanel;
    private javax.swing.JPanel SaladPanel;
    private javax.swing.JTable appTable;
    private javax.swing.JPanel breadPanel;
    private javax.swing.JTable breadTable;
    private javax.swing.JPanel categoryPanel;
    private javax.swing.JPanel dessertPanel;
    private javax.swing.JTable dessertsTable;
    private javax.swing.JButton finalOrderButton;
    private javax.swing.JTable finalOrderTable;
    private javax.swing.JTextArea itemInfoTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel mainCoursePanel;
    private javax.swing.JTable mainCourseTable;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JTable quickBitesTable;
    private javax.swing.JPanel quickPanel;
    private javax.swing.JTable riceItemsTable;
    private javax.swing.JTable saladTable;
    private javax.swing.JButton updateOrderButton;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables

}
